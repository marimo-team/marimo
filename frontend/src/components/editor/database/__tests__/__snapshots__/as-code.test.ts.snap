// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateDatabaseCode > basic connections > bigquery 1`] = `
"from sqlmodel import create_engine
import os
import json
credentials = json.loads("""{"type": "service_account", "project_id": "test"}""")
engine = create_engine(f"bigquery://my-project/my_dataset", credentials_info=credentials)"
`;

exports[`generateDatabaseCode > basic connections > duckdb 1`] = `
"from sqlmodel import create_engine
import os
engine = create_engine("duckdb:data.duckdb", read_only=True)"
`;

exports[`generateDatabaseCode > basic connections > mysql with SQLAlchemy 1`] = `
"from sqlalchemy import create_engine
import os
password = os.environ.get("MYSQL_PASSWORD", "pass")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:3306/test"
engine = create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > basic connections > mysql with SQLModel 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("MYSQL_PASSWORD", "pass")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:3306/test"
engine = create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > basic connections > postgres with SQLAlchemy 1`] = `
"from sqlalchemy import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/test"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > basic connections > postgres with SQLModel 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/test"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > basic connections > snowflake 1`] = `
"from sqlmodel import create_engine
import os
from snowflake.sqlalchemy import URL
import sqlalchemy as sa
password = os.environ.get("SNOWFLAKE_PASSWORD", "pass")
engine = sa.create_engine(
    URL(
        account=account,
        user=user,
        password=os.environ.get("SNOWFLAKE_PASSWORD", "pass"),
        database=db,
        warehouse=warehouse,
        schema=schema,
        role=role
    )
)"
`;

exports[`generateDatabaseCode > basic connections > sqlite 1`] = `
"from sqlmodel import create_engine
import os
DATABASE_URL = "sqlite:////path/to/db.sqlite"
engine = create_engine(DATABASE_URL)"
`;

exports[`generateDatabaseCode > edge cases > bigquery with long credentials 1`] = `
"from sqlmodel import create_engine
import os
import json
credentials = json.loads("""xxxxxxxxxx""")
engine = create_engine(f"bigquery://my-project/my_dataset", credentials_info=credentials)"
`;

exports[`generateDatabaseCode > edge cases > duckdb with relative path 1`] = `
"from sqlmodel import create_engine
import os
engine = create_engine("duckdb:./relative/path/db.duckdb")"
`;

exports[`generateDatabaseCode > edge cases > mysql with extremely long database name 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("MYSQL_PASSWORD", "pass")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:3306/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
engine = create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > edge cases > mysql with max port 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("MYSQL_PASSWORD", "pass")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:65535/test"
engine = create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > edge cases > postgres with IPv6 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@2001:0db8:85a3:0000:0000:8a2e:0370:7334:5432/test"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with URL-encoded characters 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "pass%20word")
DATABASE_URL = f"postgresql://user%20name:{password}@localhost:5432/test%20db"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with domain socket 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@/var/run/postgresql:undefined/test"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with non-standard port 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@localhost:54321/test"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with special chars SQLAlchemy 1`] = `
"from sqlalchemy import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "pass@#$%^&*")
DATABASE_URL = f"postgresql://user-name.special:{password}@localhost:5432/test-db.special"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with special chars SQLModel 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "pass@#$%^&*")
DATABASE_URL = f"postgresql://user-name.special:{password}@localhost:5432/test-db.special"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with unicode 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "密码")
DATABASE_URL = f"postgresql://用户:{password}@localhost:5432/测试数据库"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > snowflake with all optional fields filled 1`] = `
"from sqlmodel import create_engine
import os
from snowflake.sqlalchemy import URL
import sqlalchemy as sa
password = os.environ.get("SNOWFLAKE_PASSWORD", "pass")
engine = sa.create_engine(
    URL(
        account=org-account,
        user=user,
        password=os.environ.get("SNOWFLAKE_PASSWORD", "pass"),
        database=db,
        warehouse=compute_wh,
        schema=public,
        role=accountadmin
    )
)"
`;

exports[`generateDatabaseCode > edge cases > snowflake with minimal config SQLModel 1`] = `
"from sqlmodel import create_engine
import os
from snowflake.sqlalchemy import URL
import sqlalchemy as sa
password = os.environ.get("SNOWFLAKE_PASSWORD", "pass")
engine = sa.create_engine(
    URL(
        account=account,
        user=user,
        password=os.environ.get("SNOWFLAKE_PASSWORD", "pass"),
        database=db
    )
)"
`;

exports[`generateDatabaseCode > edge cases > sqlite with empty path 1`] = `
"from sqlmodel import create_engine
import os
DATABASE_URL = "sqlite:///"
engine = create_engine(DATABASE_URL)"
`;

exports[`generateDatabaseCode > security cases > bigquery with malformed JSON 1`] = `
"from sqlmodel import create_engine
import os
import json
credentials = json.loads("""{"type": "service_account", "project_id": "test"""")
engine = create_engine(f"bigquery://my-project/my_dataset", credentials_info=credentials)"
`;

exports[`generateDatabaseCode > security cases > bigquery with malformed JSON 2`] = `
"from sqlalchemy import create_engine
import os
import json
credentials = json.loads("""{"type": "service_account", "project_id": "test"""")
engine = create_engine(f"bigquery://my-project/my_dataset", credentials_info=credentials)"
`;

exports[`generateDatabaseCode > security cases > mysql with very long password 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("MYSQL_PASSWORD", "xxxxxxxxxx")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:3306/test"
engine = create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > security cases > mysql with very long password 2`] = `
"from sqlalchemy import create_engine
import os
password = os.environ.get("MYSQL_PASSWORD", "xxxxxxxxxx")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:3306/test"
engine = create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > security cases > postgres with SQL injection attempt in database name 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/db'; DROP TABLE users;--"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > security cases > postgres with SQL injection attempt in database name 2`] = `
"from sqlalchemy import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/db'; DROP TABLE users;--"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > security cases > postgres with empty password 1`] = `
"from sqlmodel import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/test"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > security cases > postgres with empty password 2`] = `
"from sqlalchemy import create_engine
import os
password = os.environ.get("POSTGRES_PASSWORD", "")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/test"
engine = create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > security cases > snowflake with sensitive info in account 1`] = `
"from sqlmodel import create_engine
import os
from snowflake.sqlalchemy import URL
import sqlalchemy as sa
password = os.environ.get("SNOWFLAKE_PASSWORD", "pass")
engine = sa.create_engine(
    URL(
        account=account-with-password123,
        user=user,
        password=os.environ.get("SNOWFLAKE_PASSWORD", "pass"),
        database=db,
        warehouse=warehouse,
        schema=schema,
        role=role
    )
)"
`;

exports[`generateDatabaseCode > security cases > snowflake with sensitive info in account 2`] = `
"from sqlalchemy import create_engine
import os
from snowflake.sqlalchemy import URL
import sqlalchemy as sa
password = os.environ.get("SNOWFLAKE_PASSWORD", "pass")
engine = sa.create_engine(
    URL(
        account=account-with-password123,
        user=user,
        password=os.environ.get("SNOWFLAKE_PASSWORD", "pass"),
        database=db,
        warehouse=warehouse,
        schema=schema,
        role=role
    )
)"
`;
