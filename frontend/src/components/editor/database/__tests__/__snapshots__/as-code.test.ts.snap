// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateDatabaseCode > basic connections > bigquery 1`] = `
"import os
import sqlmodel
import json

credentials = json.loads("""{"type": "service_account", "project_id": "test"}""")
engine = sqlmodel.create_engine(f"bigquery://my-project/my_dataset", credentials_info=credentials)"
`;

exports[`generateDatabaseCode > basic connections > chdb 1`] = `
"import chdb

engine = chdb.connect("file:///path/to/db.chdb", read_only=False)"
`;

exports[`generateDatabaseCode > basic connections > clickhouse 1`] = `
"import os
import clickhouse_connect

engine = clickhouse_connect.get_client(
  host="localhost",
  user="user",
  port=8123,
  password=os.environ.get("CLICKHOUSE_PASSWORD", "pass")
)"
`;

exports[`generateDatabaseCode > basic connections > duckdb 1`] = `
"import duckdb

DATABASE_URL = "data.duckdb"
engine = duckdb.connect(DATABASE_URL, read_only=True)"
`;

exports[`generateDatabaseCode > basic connections > mysql with SQLAlchemy 1`] = `
"import os
import sqlalchemy

password = os.environ.get("MYSQL_PASSWORD", "pass")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:3306/test"
engine = sqlalchemy.create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > basic connections > mysql with SQLModel 1`] = `
"import os
import sqlmodel

password = os.environ.get("MYSQL_PASSWORD", "pass")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:3306/test"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > basic connections > postgres with SQLAlchemy 1`] = `
"import os
import sqlalchemy

password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/test"
engine = sqlalchemy.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > basic connections > postgres with SQLModel 1`] = `
"import os
import sqlmodel

password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/test"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > basic connections > snowflake 1`] = `
"import os
import sqlmodel
from snowflake.sqlalchemy import URL

engine = sqlmodel.create_engine(
  URL(
    account="account",
    user="user",
    database="db",
    warehouse="warehouse",
    schema="schema",
    role="role",
    password=os.environ.get("SNOWFLAKE_PASSWORD", "pass")
  )
)"
`;

exports[`generateDatabaseCode > basic connections > sqlite 1`] = `
"import sqlmodel

DATABASE_URL = "sqlite:////path/to/db.sqlite"
engine = sqlmodel.create_engine(DATABASE_URL)"
`;

exports[`generateDatabaseCode > edge cases > bigquery with long credentials 1`] = `
"import os
import sqlmodel
import json

credentials = json.loads("""xxxxxxxxxx""")
engine = sqlmodel.create_engine(f"bigquery://my-project/my_dataset", credentials_info=credentials)"
`;

exports[`generateDatabaseCode > edge cases > chdb with no database 1`] = `
"import chdb

engine = chdb.connect("", read_only=False)"
`;

exports[`generateDatabaseCode > edge cases > clickhouse connect with minimal config 1`] = `
"import os
import clickhouse_connect

engine = clickhouse_connect.get_client(
  host="localhost",
  user="user",

)"
`;

exports[`generateDatabaseCode > edge cases > clickhouse with https 1`] = `
"import os
import clickhouse_connect

engine = clickhouse_connect.get_client(
  host="localhost",
  user="user",
  secure=True,
  port=8123,
  password=os.environ.get("CLICKHOUSE_PASSWORD", "pass")
)"
`;

exports[`generateDatabaseCode > edge cases > clickhouse with no port 1`] = `
"import os
import clickhouse_connect

engine = clickhouse_connect.get_client(
  host="localhost",
  user="user",
  password=os.environ.get("CLICKHOUSE_PASSWORD", "pass")
)"
`;

exports[`generateDatabaseCode > edge cases > duckdb with relative path 1`] = `
"import sqlmodel

DATABASE_URL = "./relative/path/db.duckdb"
engine = sqlmodel.connect(DATABASE_URL, read_only=False)"
`;

exports[`generateDatabaseCode > edge cases > mysql with extremely long database name 1`] = `
"import os
import sqlmodel

password = os.environ.get("MYSQL_PASSWORD", "pass")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:3306/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > edge cases > mysql with max port 1`] = `
"import os
import sqlmodel

password = os.environ.get("MYSQL_PASSWORD", "pass")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:65535/test"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > edge cases > postgres with IPv6 1`] = `
"import os
import sqlmodel

password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@2001:0db8:85a3:0000:0000:8a2e:0370:7334:5432/test"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with URL-encoded characters 1`] = `
"import os
import sqlmodel

password = os.environ.get("POSTGRES_PASSWORD", "pass%20word")
DATABASE_URL = f"postgresql://user%20name:{password}@localhost:5432/test%20db"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with domain socket 1`] = `
"import os
import sqlmodel

password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@/var/run/postgresql:undefined/test"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with non-standard port 1`] = `
"import os
import sqlmodel

password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@localhost:54321/test"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with special chars SQLAlchemy 1`] = `
"import os
import sqlalchemy

password = os.environ.get("POSTGRES_PASSWORD", "pass@#$%^&*")
DATABASE_URL = f"postgresql://user-name.special:{password}@localhost:5432/test-db.special"
engine = sqlalchemy.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with special chars SQLModel 1`] = `
"import os
import sqlmodel

password = os.environ.get("POSTGRES_PASSWORD", "pass@#$%^&*")
DATABASE_URL = f"postgresql://user-name.special:{password}@localhost:5432/test-db.special"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > postgres with unicode 1`] = `
"import os
import sqlmodel

password = os.environ.get("POSTGRES_PASSWORD", "密码")
DATABASE_URL = f"postgresql://用户:{password}@localhost:5432/测试数据库"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > edge cases > snowflake with all optional fields filled 1`] = `
"import os
import sqlmodel
from snowflake.sqlalchemy import URL

engine = sqlmodel.create_engine(
  URL(
    account="org-account",
    user="user",
    database="db",
    warehouse="compute_wh",
    schema="public",
    role="accountadmin",
    password=os.environ.get("SNOWFLAKE_PASSWORD", "pass")
  )
)"
`;

exports[`generateDatabaseCode > edge cases > snowflake with minimal config SQLModel 1`] = `
"import os
import sqlmodel
from snowflake.sqlalchemy import URL

engine = sqlmodel.create_engine(
  URL(
    account="account",
    user="user",
    database="db",
    password=os.environ.get("SNOWFLAKE_PASSWORD", "pass")
  )
)"
`;

exports[`generateDatabaseCode > edge cases > sqlite with empty path 1`] = `
"import sqlmodel

DATABASE_URL = "sqlite:///"
engine = sqlmodel.create_engine(DATABASE_URL)"
`;

exports[`generateDatabaseCode > security cases > bigquery with malformed JSON 1`] = `
"import os
import sqlmodel
import json

credentials = json.loads("""{"type": "service_account", "project_id": "test"""")
engine = sqlmodel.create_engine(f"bigquery://my-project/my_dataset", credentials_info=credentials)"
`;

exports[`generateDatabaseCode > security cases > bigquery with malformed JSON 2`] = `
"import os
import sqlalchemy
import json

credentials = json.loads("""{"type": "service_account", "project_id": "test"""")
engine = sqlalchemy.create_engine(f"bigquery://my-project/my_dataset", credentials_info=credentials)"
`;

exports[`generateDatabaseCode > security cases > mysql with very long password 1`] = `
"import os
import sqlmodel

password = os.environ.get("MYSQL_PASSWORD", "xxxxxxxxxx")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:3306/test"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > security cases > mysql with very long password 2`] = `
"import os
import sqlalchemy

password = os.environ.get("MYSQL_PASSWORD", "xxxxxxxxxx")
DATABASE_URL = f"mysql+pymysql://user:{password}@localhost:3306/test"
engine = sqlalchemy.create_engine(DATABASE_URL, connect_args={'ssl': {'ssl-mode': 'preferred'}})"
`;

exports[`generateDatabaseCode > security cases > postgres with SQL injection attempt in database name 1`] = `
"import os
import sqlmodel

password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/db'; DROP TABLE users;--"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > security cases > postgres with SQL injection attempt in database name 2`] = `
"import os
import sqlalchemy

password = os.environ.get("POSTGRES_PASSWORD", "pass")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/db'; DROP TABLE users;--"
engine = sqlalchemy.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > security cases > postgres with empty password 1`] = `
"import os
import sqlmodel

password = os.environ.get("POSTGRES_PASSWORD", "")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/test"
engine = sqlmodel.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > security cases > postgres with empty password 2`] = `
"import os
import sqlalchemy

password = os.environ.get("POSTGRES_PASSWORD", "")
DATABASE_URL = f"postgresql://user:{password}@localhost:5432/test"
engine = sqlalchemy.create_engine(DATABASE_URL, connect_args={'sslmode': 'require'})"
`;

exports[`generateDatabaseCode > security cases > snowflake with sensitive info in account 1`] = `
"import os
import sqlmodel
from snowflake.sqlalchemy import URL

engine = sqlmodel.create_engine(
  URL(
    account="account-with-password123",
    user="user",
    database="db",
    warehouse="warehouse",
    schema="schema",
    role="role",
    password=os.environ.get("SNOWFLAKE_PASSWORD", "pass")
  )
)"
`;

exports[`generateDatabaseCode > security cases > snowflake with sensitive info in account 2`] = `
"import os
import sqlalchemy
from snowflake.sqlalchemy import URL

engine = sqlalchemy.create_engine(
  URL(
    account="account-with-password123",
    user="user",
    database="db",
    warehouse="warehouse",
    schema="schema",
    role="role",
    password=os.environ.get("SNOWFLAKE_PASSWORD", "pass")
  )
)"
`;
