[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "marimo"
description = "A library for making reactive notebooks and apps"
dynamic = ["version"]
# We try to keep dependencies to a minimum, to avoid conflicts with
# user environments;we need a very compelling reason for each dependency added.
# Dependencies should have lower bounds, which should be as loose as possible.
dependencies = [
    # For maintainable cli
    "click>=8.0,<9",
    # For python 3.8 compatibility
    "importlib_resources>=5.10.2; python_version < \"3.9\"",
    # code completion
    "jedi>=0.18.0",
    # compile markdown to html
    "markdown>=3.4,<4",
    # add features to markdown
    "pymdown-extensions>=9.0,<11",
    # syntax highlighting of code in markdown
    "pygments>=2.13,<3",
    # for reading, writing configs
    "tomlkit>= 0.12.0",
    # web server
    # - 0.22.0 introduced timeout-graceful-shutdown, which we use
    "uvicorn >= 0.22.0",
    # web framework
    # - 0.26.1 introduced lifespans, which we use
    # - starlette 0.36.0 introduced a bug
    "starlette>=0.26.1,!=0.36.0",
    # websockets for use with starlette
    "websockets >= 10.0.0,<13.0.0",
    # python <=3.10 compatibility
    "typing_extensions>=4.4.0; python_version < \"3.11\"",
    # for rst parsing
    "docutils>=0.17.0",
    # to show RAM, CPU usage, other system utilities
    "psutil>=5.0",
    # for cell formatting; if user version is not compatible, no-op
    # so no lower bound needed
    "black",
]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.8"
classifiers = [
    "Operating System :: OS Independent",
    "License :: OSI Approved :: Apache Software License",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
]

[project.scripts]
marimo = "marimo._cli.cli:main"

[project.optional-dependencies]
dev = [
    "click < 8.1.4",  # https://github.com/pallets/click/issues/2558
    "black~=23.3.0",
    "build~=0.10.0",
    "types-Pygments~=2.17.0.20240310",
    "types-psutil~=5.9.5.20240423",
    # for server testing
    "httpx~=0.26.0",
    # For testing mo.ui.chart, dataframes, tables
    "pandas>=1.3.0",
    "pandas-stubs>=1.3.0",
    "pyarrow>=15.0.2,<16",
    "pyarrow-stubs>=10",
    # For testing mo.image
    "pillow~=10.2.0",
    "types-Pillow~=10.2.0.20240311",
    # polars 0.19.13 requires building maturn from source, but we don't
    # have the rust toolchain installed on CI
    "polars==0.19.12",
    "pytest~=7.4.0",
    "pytest-codecov~=0.5.1",
    "pytest-asyncio~=0.23.4",
    "types-Markdown~=3.6.0.20240316",
    "types-PyYAML~=6.0.12.20240311",
    "mypy~=1.7.0",
    "ruff~=0.3.6",
    "typos~=1.17.1",
    # For docs
    "pypandoc~=1.11",
    "autoclasstoc~=1.6.0",
    # furo raises an error during docs build when sphinx is upgraded
    "sphinx==7.0.1",
    "sphinx-copybutton~=0.5.2",
    "sphinx-new-tab-link~=0.1.1",
    "sphinx-sitemap~=2.5.1",
    "sphinx-design~=0.5.0",
    "myst_parser~=2.0.0",
    "furo==2023.5.20"
]

testcore = [
    "click < 8.1.4",  # https://github.com/pallets/click/issues/2558,
    # for server testing
    "httpx~=0.26.0",
    "pytest~=7.4.0",
    "pytest-codecov~=0.5.1",
    "pytest-asyncio~=0.23.4",
]

testoptional = [
    # For testing mo.ui.chart, table, ...
    "altair>=5.0.0",
    "pandas>=1.3.0",
    "pandas-stubs>=1.3.0",
    "pyarrow>=15.0.2,<16",
    "pyarrow-stubs>=10",
    "pillow~=10.2.0",
    "types-Pillow~=10.2.0.20240311",
    # polars 0.19.13 requires building maturn from source, but we don't
    # have the rust toolchain installed on CI
    "polars==0.19.12",
    "anywidget~=0.9.3",
    "ipython~=8.12.3",
    "openai~=1.12.0",
]

[project.urls]
homepage = "https://github.com/marimo-team/marimo"

[tool.setuptools.dynamic]
version = { attr = "marimo.__version__" }

[tool.setuptools.packages.find]
# project source is entirely contained in the `marimo` package
include = ["marimo*"]

[tool.ruff]
line-length=79
exclude = [
    "marimo/_tutorials",
    "marimo/_snippets/data",
    "marimo/_smoke_tests",
    "marimo/_test_utils/codegen_data",
    "marimo/_test_utils/_tutorials",
    "marimo/_static/files/wasm-intro.py",
    "tests/_ast/codegen_data",
    "tests/_ast/cell_data",
    "tests/_cli/ipynb_data",
    "tests/_runtime/runtime_data",
    "frontend",
    "docs",
    "build",
]

[tool.ruff.lint]
ignore = [
    "G004", # Logging statement uses f-string
    "TCH001", # Move application import into a type-checking block
    "D301", # Use r""" if any backslashes in a docstring
    # TODO: we should fix these, and enable this rule
    "PT011", # `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
]
extend-select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    # warning
    "W",
    # flake8 builtin-variable-shadowing
    "A001",
    # flake8 builtin-argument-shadowing
    "A002",
    # flake8-unused-arguments
    "ARG",
    # flake8-bugbear
    "B",
    "ANN002", # missing-type-args
    "ANN003", # missing-type-kwargs
    "ANN201", # missing-return-type-undocumented-public-function
    "ANN202", # missing-return-type-private-function
    "ANN205", # missing-return-type-static-method
    "ANN206", # missing-return-type-class-method
    # future annotations
    "FA102",
    # isort
    "I001",
    # Enable entire ruff rule section
    "ASYNC", # subset of flake8-async rules
    "TCH", # Rules around TYPE_CHECKING blocks
    "G", # flake8-logging-format rules
    "LOG", # flake8-logging rules, most of them autofixable
    "PT", # flake8-pytest-style rules
    "TID25", # flake8-tidy-imports rules
    # Per rule enables
    # "RUF100", # Unused noqa (auto-fixable)
    # We ignore more pydocstyle than we enable, so be more selective at what we enable
    # "D101", # Missing docstring in public class
    "D106",
    # "D2",
    "D3",
    # "D400", # First line should end with a period
    # "D401", # First line of docstring should be in imperative mood
    "D402",
    "D403",
    "D412",
    "D419",
    "PGH004",  # Use specific rule codes when using noqa
    "PGH005", # Invalid unittest.mock.Mock methods/attributes/properties
    # "S101", # Checks use `assert` outside the test cases, test cases should be added into the exclusions
    "B004", # Checks for use of hasattr(x, "__call__") and replaces it with callable(x)
    "B006", # Checks for uses of mutable objects as function argument defaults.
    "B017", # Checks for pytest.raises context managers that catch Exception or BaseException.
    "B019", # Use of functools.lru_cache or functools.cache on methods can lead to memory leaks
    "TRY002", # Prohibit use of `raise Exception`, use specific exceptions instead.
]

[tool.ruff.lint.per-file-ignores]
"**/{tests}/*" = ["ANN201", "ANN202"]

# Never try to fix `F401` (unused imports).
unfixable = ["F401"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"
# Ban certain modules from being imported at module level, instead requiring
# that they're imported lazily (e.g., within a function definition).
banned-module-level-imports = ["numpy", "pandas"]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = false

[tool.mypy]
strict = true
exclude = [
    'examples',
    'tests/_ast/codegen_data',
    'tests/_ast/cell_data',
    'tests/_cli/ipynb_data',
    'tests/_runtime/runtime_data',
    'marimo/_tutorials/',
    'marimo/_snippets/data/',
    'marimo/_smoke_tests/',
]
warn_unused_ignores=false

# tutorials shouldn't be type-checked (should be excluded), but they
# get included anyway, maybe due to import following; this is coarse but works
[[tool.mypy.overrides]]
module= "marimo._tutorials.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q -v --ignore tests/_cli/ipynb_data --ignore tests/_ast/codegen_data"
testpaths = [
    "tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
omit = ["marimo/_tutorials/*"]

[tool.typos.default.extend-words]
wheres = "wheres"

[tool.typos.files]
extend-exclude = [
    "MultiSelectPlugin.test.ts",
    "module_name_to_pypi_name.py",
    "**/snapshots/*",
    "**/__demo__/*",
    "base64.test.ts",
]
